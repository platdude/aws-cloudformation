# AWS Partner Checklist: IAM-003 - Use strong password policy
AWSTemplateFormatVersion: '2010-09-09'
Description: 
  'A CloudFormation template for creating a Stack Set that deploys the password policy at the Organization level'
Parameters: 
  AllowChangePassword:
    Default: 'True'
    Description: 'Whether to allow users to change their passwords'
    Type: 'String'
    AllowedValues: 
      - 'True'
      - 'False'
    ConstraintDescription: 'True or False'

  MinPasswordLength:
    Default: 20
    Description: 'Minimum length of the user password. Maximum allowed by AWS is 128, so we allow 20-128 characters'
    Type: 'Number'
    ConstraintDescription: '(20-128 characters)'
    MinValue: 20
    MaxValue: 128

  RequireLowercase:
    Default: 'True'
    Description: 'Enforce required lowercase characters in the user password'
    Type: 'String'
    AllowedValues: 
      - 'True'
      - 'False'
    ConstraintDescription: 'True or False'

  RequireNumbers:
    Default: 'True'
    Description: 'Enforce required numbers in the user password'
    Type: 'String'
    AllowedValues: 
      - 'True'
      - 'False'
    ConstraintDescription: 'True or False'

  RequireSymbols:
    Default: 'False'
    Description: 'Enforce required symbols in the user password'
    Type: 'String'
    AllowedValues: 
      - 'True'
      - 'False'
    ConstraintDescription: 'True or False'

  RequireUppercase: 
    Default: 'True'
    Description: 'Enforce required uppercase characters in the user password'
    Type: 'String'
    AllowedValues: 
      - 'True'
      - 'False'
    ConstraintDescription: 'True or False'
  
  PasswordHistoryMemory:
    Default: 24
    Description: 'Number of previous passwords to remember'
    Type: 'Number'
    MinValue: 10
    MaxValue: 24
    ConstraintDescription: '(10-24) passwords'

Resources:
  IamPasswordPolicy:
    Type: 'AWS::CloudFormation::CustomResource'
    Properties:
      ServiceToken: !GetAtt IamPasswordPolicyLambda.Arn
      Region: !Ref 'AWS::Region'

  IamPasswordPolicyLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'IamPasswordPolicyLambdaRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: 'IAMPasswordCreatorPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'iam:GetAccountPasswordPolicy'
                  - 'iam:UpdateAccountPasswordPolicy'
                  - 'iam:DeleteAccountPasswordPolicy'
                Resource: '*'
        - PolicyName: 'WhitelistSpecificLambdaFunction'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Deny'
                Action:
                  - '*'
                Resource: '*'
                Condition: 
                  StringNotLike: 
                    'aws:userid': '*:IamPasswordPolicyLambda'

  IamPasswordPolicyLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'IamPasswordPolicyLambda'
      Code:
        ZipFile: !Sub |
          import boto3
          from botocore.exceptions import ClientError
          import json
          import cfnresponse
          iam = boto3.client('iam')

          # Lambda entry point
          def handler(event, context):
            if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
              res, reason = update_policy()
            elif event['RequestType'] == 'Delete':
              res, reason = delete_policy()
            else:
              res = False
              reason = 'Unknown operation: ' + event['RequestType']
            responseData = {}
            responseData['Reason'] = reason
            if res:
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
            else:
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
          def update_policy():
            try:
              response = iam.update_account_password_policy(
                  AllowUsersToChangePassword=${AllowChangePassword},
                  MinimumPasswordLength=${MinPasswordLength},
                  RequireLowercaseCharacters=${RequireLowercase},
                  RequireNumbers=${RequireNumbers},
                  RequireSymbols=${RequireSymbols},
                  RequireUppercaseCharacters=${RequireUppercase},
                  PasswordReusePrevention=${PasswordHistoryMemory})
              return(True, response)
            except Exception as e:
              return (False, 'Cannot update policy: ' + str(e))
          def delete_policy():
            try:
              policy = iam.get_account_password_policy()
              response = iam.delete_account_password_policy()
              return (True, response)
            except Exception as e:
              return (False, 'Cannot delete policy: ' + str(e))
      Handler: index.handler
      MemorySize: 128
      Timeout: 30
      Runtime: python3.8
      Role: !GetAtt IamPasswordPolicyLambdaRole.Arn
      Timeout: 60